#!/usr/bin/env python

import curses
import subprocess
import re

menu = ['Available networks', 'Network interfaces', 'Hardware devices', 'Exit']
menu_len = len(menu) # number of items in the current menu
current_row_idx = 0  # index of the currently selected row in the current menu
menu_idx = -1        # Stores wich menu we are currently in. -1 means the main menu, 0 means menu[0], etc.
ssids = []           # will store the names of availabe wifi networks

def print_menu(stdscr, selected_row_idx: int, menu_idx: int) -> None:
    """Prints out the main menu to the screen."""

    stdscr.clear()
    h, w = stdscr.getmaxyx()

    if menu_idx == -1:
        for idx, row in enumerate(menu):
            x = w//2 - len(row)//2
            y = h//2 - len(menu)//2 + idx
            if idx == selected_row_idx:
                stdscr.attron(curses.color_pair(1))
                stdscr.addstr(y, x, row)
                stdscr.attroff(curses.color_pair(1))
            else:
                stdscr.addstr(y, x, row)
    elif menu_idx == 0:
        list_available_networks(stdscr, selected_row_idx)
    elif menu_idx == 1:
        stdscr.addstr("network interfaces")
    elif menu_idx == 2:
        stdscr.addstr("hardware devices")

    stdscr.refresh()

def list_available_networks(stdscr, selected_row_idx: int) -> None:
    """Runs a shellscript, called get_ssids.sh, to get the name of available
    wifi networks, then displays a list of ssids."""

    global ssids, menu_len

    stdscr.clear()

    h, w = stdscr.getmaxyx()
    get_ssids_proc = subprocess.run('./get_ssids.sh', stdout=subprocess.PIPE)
    ssids = get_ssids_proc.stdout.splitlines()

    for idx, row in enumerate(ssids):
        # some disgustingly specific string manipulation to remove remaining
        # ansi escape sequences from the output of get_ssids.sh
        row = re.sub("^\\[\\[0m", "", str(row))
        row = re.sub("b'", "", row)
        row = re.sub("\\\\x1b\\[0m", "", row)
        row = row[:-1]

        x = w//2 - len(row)//2
        y = h//2 - len(menu)//2 + idx

        if idx == selected_row_idx:
            stdscr.attron(curses.color_pair(1))
            stdscr.addstr(y, x, row)
            stdscr.attroff(curses.color_pair(1))
        else:
            stdscr.addstr(y, x, row)

    menu_len = len(ssids)

    stdscr.refresh()

def print_header(stdscr):
    ascii_banner = [
         " _           _   _     _        _ ",
         "(_)_ __ ____| |_| |___| |_ _  _(_)",
         "| \ V  V / _|  _| |___|  _| || | |",
         "|_|\_/\_/\__|\__|_|    \__|\_,_|_|"

    ]
    h, w = stdscr.getmaxyx()
    for idx, line in enumerate(ascii_banner):
        stdscr.addstr(h//5 + idx, w//2 - 18, line)
    stdscr.refresh()
        

def print_footer(stdscr):
    h, w = stdscr.getmaxyx()
    version_info = "version: 0.0.1"
    stdscr.addstr(h - 1, 0, "Navigate with vim-keys or the arrow-keys, press q to quit.")
    stdscr.addstr(h - 1, w - len(version_info) - 1, version_info)
    stdscr.refresh()

def back(stdscr) -> None:
    """Resets global variables indicating which is the currently active menu,
    so that the main menu will be displayed."""
    global menu_idx, current_row_idx, menu_len

    current_row_idx = menu_idx
    menu_idx = -1
    menu_len = len(menu)

    stdscr.clear()
    stdscr.refresh()

def main(stdscr) -> None:
    global menu_idx, current_row_idx, ssids

    curses.curs_set(0)
    curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)

    print_menu(stdscr, current_row_idx, menu_idx)
    print_header(stdscr)
    print_footer(stdscr)

    while 1:
        key = stdscr.getch()

        stdscr.clear()

        if (key == curses.KEY_UP or key == ord("k")) and current_row_idx > 0:
            current_row_idx -= 1
        elif (key == curses.KEY_DOWN or key == ord("j")) and current_row_idx < menu_len - 1:
            current_row_idx += 1
        elif key == ord("q"):
            if menu_idx == -1:
                quit()
            else:
                back(stdscr)
        elif key == curses.KEY_ENTER or key in [10, 13]:
            if menu_idx == -1:
                if current_row_idx == menu_len - 1:
                    quit()
                else:
                    menu_idx = current_row_idx
            elif menu_idx == 0:
                subprocess.run(['iwctl', 'station', 'wlan0', 'connect', ssids[current_row_idx]])
                stdscr.clear()
                stdscr.addstr("jani")
                stdscr.refresh()
                stdscr.getch()

        print_menu(stdscr, current_row_idx, menu_idx)
        print_header(stdscr)
        print_footer(stdscr)

        stdscr.refresh()

curses.wrapper(main)
